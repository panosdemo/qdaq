.TH "QDaqLoop" 3 "Wed May 20 2020" "Version 0.2.6" "qdaq" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QDaqLoop \- A class encapsulating a software loop\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <QDaqJob\&.h>\fP
.PP
Inherits \fBQDaqJob\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBLoopTimerThread\fP"
.br
.in -1c
.SS "Public Slots"

.in +1c
.ti -1c
.RI "bool \fBarm\fP ()"
.br
.RI "Arm the loop\&. "
.ti -1c
.RI "void \fBdisarm\fP ()"
.br
.RI "Disarm the loop\&. "
.ti -1c
.RI "QString \fBstat\fP ()"
.br
.RI "Print loop statistics\&. "
.ti -1c
.RI "void \fBcreateLoopEngine\fP ()"
.br
.RI "Create a dedicated \fBQDaqScriptEngine\fP\&. "
.in -1c
.SS "Signals"

.in +1c
.ti -1c
.RI "void \fBabort\fP ()"
.br
.RI "This is emitted if the loop aborts due to an error\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "Q_INVOKABLE \fBQDaqLoop\fP (const QString &name)"
.br
.ti -1c
.RI "virtual \fB~QDaqLoop\fP (void)"
.br
.ti -1c
.RI "uint \fBlimit\fP () const"
.br
.ti -1c
.RI "uint \fBcount\fP () const"
.br
.ti -1c
.RI "uint \fBdelay\fP () const"
.br
.ti -1c
.RI "uint \fBpreload\fP () const"
.br
.ti -1c
.RI "uint \fBperiod\fP () const"
.br
.ti -1c
.RI "void \fBsetLimit\fP (uint d)"
.br
.ti -1c
.RI "void \fBsetDelay\fP (uint d)"
.br
.ti -1c
.RI "void \fBsetPreload\fP (uint d)"
.br
.ti -1c
.RI "void \fBsetPeriod\fP (uint p)"
.br
.ti -1c
.RI "bool \fBisTop\fP () const"
.br
.RI "Return true if this is a top level loop\&. "
.ti -1c
.RI "\fBQDaqLoop\fP * \fBparentLoop\fP () const"
.br
.RI "Return the parent loop of this loop\&. "
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef \fBmath::running_average\fP< float, 10 > \fBperfmon_t\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual bool \fBexec\fP ()"
.br
.RI "Called when a loop is executed\&. "
.ti -1c
.RI "virtual bool \fBarm_\fP ()"
.br
.ti -1c
.RI "virtual void \fBdisarm_\fP ()"
.br
.ti -1c
.RI "bool \fBoperator()\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "uint \fBcount_\fP"
.br
.ti -1c
.RI "uint \fBlimit_\fP"
.br
.ti -1c
.RI "uint \fBdelay_\fP"
.br
.ti -1c
.RI "uint \fBpreload_\fP"
.br
.ti -1c
.RI "uint \fBperiod_\fP"
.br
.ti -1c
.RI "uint \fBdelay_counter_\fP"
.br
.ti -1c
.RI "bool \fBaborted_\fP"
.br
.ti -1c
.RI "QElapsedTimer \fBclock_\fP"
.br
.ti -1c
.RI "\fBLoopTimerThread\fP \fBthread_\fP"
.br
.ti -1c
.RI "\fBperfmon_t\fP \fBperfmon\fP [2]"
.br
.ti -1c
.RI "float \fBt_\fP [2]"
.br
.in -1c
.SS "Properties"

.in +1c
.ti -1c
.RI "uint \fBcount\fP"
.br
.ti -1c
.RI "uint \fBlimit\fP"
.br
.ti -1c
.RI "uint \fBdelay\fP"
.br
.ti -1c
.RI "uint \fBpreload\fP"
.br
.ti -1c
.RI "uint \fBperiod\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
A class encapsulating a software loop\&. 

\fBQDaqLoop\fP is used to execute a number of child-jobs and/or child-loops\&.
.PP
By setting the class properties we can arrange for a number of different execution scenarios: repetitive with given period repeat for ever or for a given number of cycles skip execution every delay cycles single shot
.PP
A \fBQDaqLoop\fP that has no \fBQDaqLoop\fP ancestor is considered a 'top level loop' (\fBisTop()\fP returns true)\&. Otherwise the loop is a child-loop\&.
.PP
When \fBarm()\fP is called on a top level loop, a new \fBQTimerThread\fP is spawned that calls \fBexec()\fP at each timer repetition\&.
.PP
If \fBarm()\fP is called on a child loop, then it simply arms all child jobs\&. The \fBexec()\fP function of a child loop is called from the top level loop thread\&.
.PP
To use \fBQDaqLoop\fP, create the object and build underneath it a tree of child-jobs and child-loops that perform the required tasks in the correct order\&. Then attach the loop to the \fBQDaq\fP tree either as a child of the root object ('qdaq') or under another object that does not have a \fBQDaqLoop\fP anchestor\&. Thus the loop becomes top level\&. 
.PP
Definition at line 285 of file QDaqJob\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBmath::running_average\fP<float,10> \fBQDaqLoop::perfmon_t\fP\fC [protected]\fP"

.PP
Definition at line 368 of file QDaqJob\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "QDaqLoop::QDaqLoop (const QString & name)\fC [explicit]\fP"

.PP
Definition at line 232 of file QDaqJob\&.cpp\&.
.SS "QDaqLoop::~QDaqLoop (void)\fC [virtual]\fP"

.PP
Definition at line 239 of file QDaqJob\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "void QDaqLoop::abort ()\fC [signal]\fP"

.PP
This is emitted if the loop aborts due to an error\&. 
.SS "bool QDaqLoop::arm ()\fC [inline]\fP, \fC [slot]\fP"

.PP
Arm the loop\&. If this is a top level loop then this function starts the timer thread after succesfully arming all child jobs\&.
.PP
If it is a child loop then only the arming is done\&.
.PP
\fBReturns\fP
.RS 4
true if the loop is succesfully armed\&. 
.RE
.PP

.PP
Definition at line 409 of file QDaqJob\&.h\&.
.SS "bool QDaqLoop::arm_ ()\fC [protected]\fP, \fC [virtual]\fP"
Performs internal initialization for the job\&.
.PP
It is called by the \fBsetArmed()\fP function\&.
.PP
This function can be reimplemented to perform specific initialization for a job\&. The parent class \fBarm_()\fP function should be called afterwards\&.
.PP
In the default implementation, if a \fBloopEngine()\fP exists the script code is checked against the script engine for errors\&.
.PP
If initialization is sucessfull it returns true, otherwise the function returns false\&. 
.PP
Reimplemented from \fBQDaqJob\fP\&.
.PP
Definition at line 288 of file QDaqJob\&.cpp\&.
.SS "uint QDaqLoop::count () const\fC [inline]\fP"

.PP
Definition at line 377 of file QDaqJob\&.h\&.
.SS "void QDaqLoop::createLoopEngine ()\fC [slot]\fP"

.PP
Create a dedicated \fBQDaqScriptEngine\fP\&. The created script engine will be used for running script code of child jobs\&.
.PP
The created script engine lives executes code within the loop timer thread\&.
.PP
All child jobs can obtain a pointer to this engine with \fBloopEngine()\fP\&. 
.PP
Definition at line 378 of file QDaqJob\&.cpp\&.
.SS "uint QDaqLoop::delay () const\fC [inline]\fP"

.PP
Definition at line 378 of file QDaqJob\&.h\&.
.SS "void QDaqLoop::disarm ()\fC [inline]\fP, \fC [slot]\fP"

.PP
Disarm the loop\&. 
.PP
Definition at line 416 of file QDaqJob\&.h\&.
.SS "void QDaqLoop::disarm_ ()\fC [protected]\fP, \fC [virtual]\fP"
Performs internal de-initialization\&.
.PP
It is called by the \fBsetArmed()\fP function\&.
.PP
Can be reimplemented to define special behavior during dis-arming\&. The parent class \fBdisarm_()\fP should be called\&. 
.PP
Reimplemented from \fBQDaqJob\fP\&.
.PP
Definition at line 306 of file QDaqJob\&.cpp\&.
.SS "bool QDaqLoop::exec ()\fC [protected]\fP, \fC [virtual]\fP"

.PP
Called when a loop is executed\&. In a top level loop this function is called at each repetition of the timer thread\&.
.PP
In a child-loop \fBexec()\fP is called from the parent loop according to the order of the child-loop in the tree structure\&.
.PP
This function first locks the mutexes of all child jobs to prevent access from other threads\&. Then it calls \fBQDaqJob::exec()\fP which runs all child jobs\&. Finally it unlocks the mutexes in the reverse order as they were locked\&.
.PP
The signals \fBupdateWidgets()\fP and \fBpropertiesChanged()\fP are emitted at each valid repetition\&.
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Reimplemented from \fBQDaqJob\fP\&.
.PP
Definition at line 242 of file QDaqJob\&.cpp\&.
.SS "bool QDaqLoop::isTop () const\fC [inline]\fP"

.PP
Return true if this is a top level loop\&. 
.PP
Definition at line 387 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::limit () const\fC [inline]\fP"

.PP
Definition at line 376 of file QDaqJob\&.h\&.
.SS "bool QDaqLoop::operator() ()\fC [inline]\fP, \fC [protected]\fP"

.PP
Definition at line 363 of file QDaqJob\&.h\&.
.SS "\fBQDaqLoop\fP * QDaqLoop::parentLoop () const"

.PP
Return the parent loop of this loop\&. 
.PP
Definition at line 396 of file QDaqJob\&.cpp\&.
.SS "uint QDaqLoop::period () const\fC [inline]\fP"

.PP
Definition at line 380 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::preload () const\fC [inline]\fP"

.PP
Definition at line 379 of file QDaqJob\&.h\&.
.SS "void QDaqLoop::setDelay (uint d)"

.PP
Definition at line 326 of file QDaqJob\&.cpp\&.
.SS "void QDaqLoop::setLimit (uint d)"

.PP
Definition at line 313 of file QDaqJob\&.cpp\&.
.SS "void QDaqLoop::setPeriod (uint p)"

.PP
Definition at line 349 of file QDaqJob\&.cpp\&.
.SS "void QDaqLoop::setPreload (uint d)"

.PP
Definition at line 340 of file QDaqJob\&.cpp\&.
.SS "QString QDaqLoop::stat ()\fC [slot]\fP"

.PP
Print loop statistics\&. 
.PP
Definition at line 370 of file QDaqJob\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "bool QDaqLoop::aborted_\fC [protected]\fP"

.PP
Definition at line 322 of file QDaqJob\&.h\&.
.SS "QElapsedTimer QDaqLoop::clock_\fC [protected]\fP"

.PP
Definition at line 325 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::count_\fC [protected]\fP"

.PP
Definition at line 320 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::delay_\fC [protected]\fP"

.PP
Definition at line 320 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::delay_counter_\fC [protected]\fP"

.PP
Definition at line 321 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::limit_\fC [protected]\fP"

.PP
Definition at line 320 of file QDaqJob\&.h\&.
.SS "\fBperfmon_t\fP QDaqLoop::perfmon[2]\fC [protected]\fP"

.PP
Definition at line 369 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::period_\fC [protected]\fP"

.PP
Definition at line 320 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::preload_\fC [protected]\fP"

.PP
Definition at line 320 of file QDaqJob\&.h\&.
.SS "float QDaqLoop::t_[2]\fC [protected]\fP"

.PP
Definition at line 370 of file QDaqJob\&.h\&.
.SS "\fBLoopTimerThread\fP QDaqLoop::thread_\fC [protected]\fP"

.PP
Definition at line 360 of file QDaqJob\&.h\&.
.SH "Property Documentation"
.PP 
.SS "uint QDaqLoop::count\fC [read]\fP"
Number of executed loop cycles (read-only)\&. It is reset to 0 when the loop is armed\&. 
.PP
Definition at line 187 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::delay\fC [read]\fP, \fC [write]\fP"
Number of parent loop cycles before this loop is called\&.
.PP
The loop is executed every delay repetitions of the parent loop\&.
.PP
If delay is 0 or 1 then the loop is executed at each repetition\&. 
.PP
Definition at line 187 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::limit\fC [read]\fP, \fC [write]\fP"
Total number of cycles to be executed\&. If limit is equal to 0 (default) then the loop runs indefinately\&. 
.PP
Definition at line 187 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::period\fC [read]\fP, \fC [write]\fP"
The repetition period in ms\&. This is meaningful only for the top level loop\&. 
.PP
Definition at line 187 of file QDaqJob\&.h\&.
.SS "uint QDaqLoop::preload\fC [read]\fP, \fC [write]\fP"
Preload the internal counter\&.
.PP
Can be used in combination with delay to run loops out of phase\&. 
.PP
Definition at line 187 of file QDaqJob\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for qdaq from the source code\&.
